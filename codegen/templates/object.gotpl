{{ $object := . }}

var {{ $object.GQLType|lcFirst}}Implementors = {{$object.Implementors}}

// nolint: gocyclo, errcheck, gas, goconst
{{- if .Stream }}
func (ec *executionContext) _{{$object.GQLType}}(ctx context.Context, sel ast.SelectionSet) func() graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, {{$object.GQLType|lcFirst}}Implementors)
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: {{$object.GQLType|quote}},
	})
	if len(fields) != 1 {
		ec.Errorf(ctx, "must subscribe to exactly one stream")
		return nil
	}

	switch fields[0].Name {
	{{- range $field := $object.Fields }}
	case "{{$field.GQLName}}":
		return ec._{{$object.GQLType}}_{{$field.GQLName}}(ctx, fields[0])
	{{- end }}
	default:
		panic("unknown field " + strconv.Quote(fields[0].Name))
	}
}
{{- else }}
func (ec *executionContext) _{{$object.GQLType}}(ctx context.Context, sel ast.SelectionSet{{if not $object.Root}}, obj *{{$object.FullName}} {{end}}) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, {{$object.GQLType|lcFirst}}Implementors)
	{{if $object.Root}}
		ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
			Object: {{$object.GQLType|quote}},
		})
	{{end}}

	type objectFieldResolver struct {
    	resolverFunc func(context.Context, graphql.CollectedField{{if not $object.Root}}, *{{$object.FullName}}{{end}})
    	isConcurrent bool
    }

    allResolvers := map[string]*objectFieldResolver{
    	{{- range $field := $object.Fields }}
    	"{{$field.GQLName}}": &objectFieldResolver{resolver: ec._{{$object.GQLType}}_{{$field.GQLName}}{{- if $field.IsConcurrent -}}, isConcurrent: true{{- end -}}}
    	{{- end }}
    }

	{{if $object.IsConcurrent}} var wg sync.WaitGroup {{end}}
	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		if field.Name == "__typename" {
			out.Values[i] = graphql.MarshalString({{$object.GQLType|quote}})
		} else if resolver, ok := allResolvers[field.Name]; ok {
			out.Values[i] = resolver.resolverFunc(ctx, field{{if not $object.Root}}, obj{{end}})
		} else {
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	{{if $object.IsConcurrent}} wg.Wait() {{end}}
	if invalid { return graphql.Null }
	return out
}
{{- end }}
